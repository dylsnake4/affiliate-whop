<rosieArtifact title="Affiliate Manager Hub Application">
<rosieCreate file="index.html">
<![CDATA[
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Affiliate Manager Hub - Whop App</title>
  <script type="importmap">
  {
    "imports": {
      "react": "https://esm.sh/react@18.2.0",
      "react-dom": "https://esm.sh/react-dom@18.2.0",
      "react-dom/": "https://esm.sh/react-dom@18.2.0/",
      "recharts": "https://esm.sh/recharts@2.10.3?external=react,react-dom"
    }
  }
  </script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      background: #f8fafc;
      color: #1e293b;
      overflow-x: hidden;
    }
    
    #root {
      min-height: 100vh;
    }
  </style>
</head>
<body>
  <div id="root"></div>
  <script type="module" src="App.js"></script>
</body>
</html>
]]>
</rosieCreate>

<rosieCreate file="App.js">
<![CDATA[
import React, { useState } from 'react';
import { createRoot } from 'react-dom/client';
import { Dashboard } from './components/Dashboard.js';
import { Affiliates } from './components/Affiliates.js';
import { Payouts } from './components/Payouts.js';
import { Settings } from './components/Settings.js';
import { Sidebar } from './components/Sidebar.js';

function App() {
  const [currentView, setCurrentView] = useState('dashboard');
  const [sidebarOpen, setSidebarOpen] = useState(false);

  const renderView = () => {
    switch (currentView) {
      case 'dashboard':
        return <Dashboard />;
      case 'affiliates':
        return <Affiliates />;
      case 'payouts':
        return <Payouts />;
      case 'settings':
        return <Settings />;
      default:
        return <Dashboard />;
    }
  };

  return (
    <div style={styles.app}>
      <Sidebar 
        currentView={currentView} 
        onNavigate={setCurrentView}
        isOpen={sidebarOpen}
        onToggle={() => setSidebarOpen(!sidebarOpen)}
      />
      <div style={styles.main}>
        <header style={styles.header}>
          <button 
            style={styles.menuButton}
            onClick={() => setSidebarOpen(!sidebarOpen)}
          >
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
              <line x1="3" y1="12" x2="21" y2="12"></line>
              <line x1="3" y1="6" x2="21" y2="6"></line>
              <line x1="3" y1="18" x2="21" y2="18"></line>
            </svg>
          </button>
          <h1 style={styles.title}>Affiliate Manager Hub</h1>
        </header>
        <div style={styles.content}>
          {renderView()}
        </div>
      </div>
    </div>
  );
}

const styles = {
  app: {
    display: 'flex',
    minHeight: '100vh',
    background: '#f8fafc',
  },
  main: {
    flex: 1,
    marginLeft: '280px',
    transition: 'margin-left 0.3s ease',
  },
  header: {
    background: 'white',
    borderBottom: '1px solid #e2e8f0',
    padding: '1.5rem 2rem',
    display: 'flex',
    alignItems: 'center',
    gap: '1rem',
  },
  menuButton: {
    display: 'none',
    background: 'none',
    border: 'none',
    cursor: 'pointer',
    padding: '0.5rem',
    color: '#64748b',
  },
  title: {
    fontSize: '1.5rem',
    fontWeight: '700',
    color: '#0f172a',
  },
  content: {
    padding: '2rem',
  },
};

// Media query for mobile
const mediaQuery = window.matchMedia('(max-width: 768px)');
if (mediaQuery.matches) {
  styles.main.marginLeft = '0';
  styles.menuButton.display = 'block';
}

const root = createRoot(document.getElementById('root'));
root.render(<App />);
]]>
</rosieCreate>

<rosieCreate file="components/Sidebar.js">
<![CDATA[
import React from 'react';

export function Sidebar({ currentView, onNavigate, isOpen, onToggle }) {
  const navItems = [
    { id: 'dashboard', label: 'Dashboard', icon: '📊' },
    { id: 'affiliates', label: 'Affiliates', icon: '👥' },
    { id: 'payouts', label: 'Payouts', icon: '💰' },
    { id: 'settings', label: 'Settings', icon: '⚙️' },
  ];

  const isMobile = window.innerWidth <= 768;

  return (
    <>
      {isMobile && isOpen && (
        <div style={styles.overlay} onClick={onToggle} />
      )}
      <aside style={{
        ...styles.sidebar,
        transform: isMobile ? (isOpen ? 'translateX(0)' : 'translateX(-100%)') : 'translateX(0)',
      }}>
        <div style={styles.logo}>
          <div style={styles.logoIcon}>🚀</div>
          <span style={styles.logoText}>Affiliate Hub</span>
        </div>
        <nav style={styles.nav}>
          {navItems.map(item => (
            <button
              key={item.id}
              style={{
                ...styles.navItem,
                ...(currentView === item.id ? styles.navItemActive : {}),
              }}
              onClick={() => {
                onNavigate(item.id);
                if (isMobile) onToggle();
              }}
            >
              <span style={styles.navIcon}>{item.icon}</span>
              <span>{item.label}</span>
            </button>
          ))}
        </nav>
        <div style={styles.footer}>
          <div style={styles.footerText}>Powered by Whop</div>
        </div>
      </aside>
    </>
  );
}

const styles = {
  overlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    background: 'rgba(0, 0, 0, 0.5)',
    zIndex: 999,
  },
  sidebar: {
    position: 'fixed',
    left: 0,
    top: 0,
    bottom: 0,
    width: '280px',
    background: 'linear-gradient(180deg, #1e293b 0%, #0f172a 100%)',
    display: 'flex',
    flexDirection: 'column',
    transition: 'transform 0.3s ease',
    zIndex: 1000,
  },
  logo: {
    padding: '2rem 1.5rem',
    display: 'flex',
    alignItems: 'center',
    gap: '1rem',
    borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
  },
  logoIcon: {
    fontSize: '2rem',
  },
  logoText: {
    fontSize: '1.25rem',
    fontWeight: '700',
    color: 'white',
  },
  nav: {
    flex: 1,
    padding: '1.5rem 1rem',
    display: 'flex',
    flexDirection: 'column',
    gap: '0.5rem',
  },
  navItem: {
    display: 'flex',
    alignItems: 'center',
    gap: '1rem',
    padding: '0.875rem 1rem',
    background: 'transparent',
    border: 'none',
    borderRadius: '0.5rem',
    color: '#94a3b8',
    fontSize: '0.95rem',
    fontWeight: '500',
    cursor: 'pointer',
    transition: 'all 0.2s',
    textAlign: 'left',
    fontFamily: 'inherit',
  },
  navItemActive: {
    background: 'rgba(59, 130, 246, 0.15)',
    color: '#60a5fa',
  },
  navIcon: {
    fontSize: '1.25rem',
  },
  footer: {
    padding: '1.5rem',
    borderTop: '1px solid rgba(255, 255, 255, 0.1)',
  },
  footerText: {
    fontSize: '0.75rem',
    color: '#64748b',
    textAlign: 'center',
  },
};
]]>
</rosieCreate>

<rosieCreate file="components/Dashboard.js">
<![CDATA[
import React from 'react';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { mockData } from '../data/mockData.js';

export function Dashboard() {
  const stats = [
    { label: 'Total Affiliates', value: '127', change: '+12%', positive: true, icon: '👥' },
    { label: 'Total Clicks', value: '45.2K', change: '+23%', positive: true, icon: '🖱️' },
    { label: 'Total Sales', value: '$28,450', change: '+18%', positive: true, icon: '💵' },
    { label: 'Commission Owed', value: '$4,268', change: '-5%', positive: false, icon: '💰' },
  ];

  return (
    <div style={styles.container}>
      <div style={styles.header}>
        <h2 style={styles.heading}>Dashboard Overview</h2>
        <p style={styles.subheading}>Track your affiliate program performance</p>
      </div>

      <div style={styles.statsGrid}>
        {stats.map((stat, index) => (
          <div key={index} style={styles.statCard}>
            <div style={styles.statIcon}>{stat.icon}</div>
            <div style={styles.statContent}>
              <div style={styles.statLabel}>{stat.label}</div>
              <div style={styles.statValue}>{stat.value}</div>
              <div style={{
                ...styles.statChange,
                color: stat.positive ? '#10b981' : '#ef4444',
              }}>
                {stat.change} vs last month
              </div>
            </div>
          </div>
        ))}
      </div>

      <div style={styles.chartsGrid}>
        <div style={styles.chartCard}>
          <h3 style={styles.chartTitle}>Revenue & Commissions (Last 7 Days)</h3>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={mockData.revenueData}>
              <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" />
              <XAxis dataKey="day" stroke="#64748b" />
              <YAxis stroke="#64748b" />
              <Tooltip 
                contentStyle={{ background: '#fff', border: '1px solid #e2e8f0', borderRadius: '8px' }}
              />
              <Line type="monotone" dataKey="revenue" stroke="#3b82f6" strokeWidth={2} />
              <Line type="monotone" dataKey="commission" stroke="#8b5cf6" strokeWidth={2} />
            </LineChart>
          </ResponsiveContainer>
        </div>

        <div style={styles.chartCard}>
          <h3 style={styles.chartTitle}>Clicks by Day</h3>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={mockData.clicksData}>
              <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" />
              <XAxis dataKey="day" stroke="#64748b" />
              <YAxis stroke="#64748b" />
              <Tooltip 
                contentStyle={{ background: '#fff', border: '1px solid #e2e8f0', borderRadius: '8px' }}
              />
              <Bar dataKey="clicks" fill="#10b981" radius={[8, 8, 0, 0]} />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      <div style={styles.tableCard}>
        <h3 style={styles.tableTitle}>Top Performing Affiliates</h3>
        <div style={styles.tableWrapper}>
          <table style={styles.table}>
            <thead>
              <tr style={styles.tableHeader}>
                <th style={styles.th}>Affiliate</th>
                <th style={styles.th}>Clicks</th>
                <th style={styles.th}>Sales</th>
                <th style={styles.th}>Commission</th>
                <th style={styles.th}>Conversion</th>
              </tr>
            </thead>
            <tbody>
              {mockData.topAffiliates.map((affiliate, index) => (
                <tr key={index} style={styles.tableRow}>
                  <td style={styles.td}>
                    <div style={styles.affiliateCell}>
                      <div style={styles.avatar}>{affiliate.name.charAt(0)}</div>
                      <div>
                        <div style={styles.affiliateName}>{affiliate.name}</div>
                        <div style={styles.affiliateEmail}>{affiliate.email}</div>
                      </div>
                    </div>
                  </td>
                  <td style={styles.td}>{affiliate.clicks}</td>
                  <td style={styles.td}>{affiliate.sales}</td>
                  <td style={styles.td}>${affiliate.commission}</td>
                  <td style={styles.td}>
                    <span style={styles.badge}>{affiliate.conversion}%</span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

const styles = {
  container: {
    maxWidth: '1400px',
    margin: '0 auto',
  },
  header: {
    marginBottom: '2rem',
  },
  heading: {
    fontSize: '2rem',
    fontWeight: '700',
    color: '#0f172a',
    marginBottom: '0.5rem',
  },
  subheading: {
    fontSize: '1rem',
    color: '#64748b',
  },
  statsGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
    gap: '1.5rem',
    marginBottom: '2rem',
  },
  statCard: {
    background: 'white',
    borderRadius: '1rem',
    padding: '1.5rem',
    display: 'flex',
    gap: '1rem',
    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
    border: '1px solid #e2e8f0',
  },
  statIcon: {
    fontSize: '2.5rem',
  },
  statContent: {
    flex: 1,
  },
  statLabel: {
    fontSize: '0.875rem',
    color: '#64748b',
    marginBottom: '0.5rem',
  },
  statValue: {
    fontSize: '2rem',
    fontWeight: '700',
    color: '#0f172a',
    marginBottom: '0.25rem',
  },
  statChange: {
    fontSize: '0.875rem',
    fontWeight: '500',
  },
  chartsGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))',
    gap: '1.5rem',
    marginBottom: '2rem',
  },
  chartCard: {
    background: 'white',
    borderRadius: '1rem',
    padding: '1.5rem',
    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
    border: '1px solid #e2e8f0',
  },
  chartTitle: {
    fontSize: '1.125rem',
    fontWeight: '600',
    color: '#0f172a',
    marginBottom: '1.5rem',
  },
  tableCard: {
    background: 'white',
    borderRadius: '1rem',
    padding: '1.5rem',
    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
    border: '1px solid #e2e8f0',
  },
  tableTitle: {
    fontSize: '1.125rem',
    fontWeight: '600',
    color: '#0f172a',
    marginBottom: '1.5rem',
  },
  tableWrapper: {
    overflowX: 'auto',
  },
  table: {
    width: '100%',
    borderCollapse: 'collapse',
  },
  tableHeader: {
    borderBottom: '2px solid #e2e8f0',
  },
  th: {
    textAlign: 'left',
    padding: '1rem',
    fontSize: '0.875rem',
    fontWeight: '600',
    color: '#64748b',
    textTransform: 'uppercase',
    letterSpacing: '0.05em',
  },
  tableRow: {
    borderBottom: '1px solid #f1f5f9',
  },
  td: {
    padding: '1rem',
    fontSize: '0.95rem',
    color: '#334155',
  },
  affiliateCell: {
    display: 'flex',
    alignItems: 'center',
    gap: '1rem',
  },
  avatar: {
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    color: 'white',
    fontWeight: '600',
    fontSize: '1rem',
  },
  affiliateName: {
    fontWeight: '500',
    color: '#0f172a',
  },
  affiliateEmail: {
    fontSize: '0.875rem',
    color: '#64748b',
  },
  badge: {
    display: 'inline-block',
    padding: '0.25rem 0.75rem',
    borderRadius: '9999px',
    background: '#dbeafe',
    color: '#1e40af',
    fontSize: '0.875rem',
    fontWeight: '500',
  },
};
]]>
</rosieCreate>

<rosieCreate file="components/Affiliates.js">
<![CDATA[
import React, { useState } from 'react';
import { mockData } from '../data/mockData.js';

export function Affiliates() {
  const [filter, setFilter] = useState('all');
  const [affiliates] = useState(mockData.allAffiliates);

  const filteredAffiliates = filter === 'all' 
    ? affiliates 
    : affiliates.filter(a => a.status.toLowerCase() === filter);

  const stats = [
    { label: 'Total Affiliates', value: affiliates.length },
    { label: 'Active', value: affiliates.filter(a => a.status === 'Active').length },
    { label: 'Pending', value: affiliates.filter(a => a.status === 'Pending').length },
    { label: 'Inactive', value: affiliates.filter(a => a.status === 'Inactive').length },
  ];

  return (
    <div style={styles.container}>
      <div style={styles.header}>
        <div>
          <h2 style={styles.heading}>Affiliate Management</h2>
          <p style={styles.subheading}>Manage your affiliate partners and approve new signups</p>
        </div>
      </div>

      <div style={styles.statsGrid}>
        {stats.map((stat, index) => (
          <div key={index} style={styles.statCard}>
            <div style={styles.statLabel}>{stat.label}</div>
            <div style={styles.statValue}>{stat.value}</div>
          </div>
        ))}
      </div>

      <div style={styles.tableCard}>
        <div style={styles.tableHeader}>
          <h3 style={styles.tableTitle}>All Affiliates</h3>
          <div style={styles.filters}>
            {['all', 'active', 'pending', 'inactive'].map(f => (
              <button
                key={f}
                style={{
                  ...styles.filterButton,
                  ...(filter === f ? styles.filterButtonActive : {}),
                }}
                onClick={() => setFilter(f)}
              >
                {f.charAt(0).toUpperCase() + f.slice(1)}
              </button>
            ))}
          </div>
        </div>

        <div style={styles.tableWrapper}>
          <table style={styles.table}>
            <thead>
              <tr style={styles.tableHeaderRow}>
                <th style={styles.th}>Affiliate</th>
                <th style={styles.th}>Status</th>
                <th style={styles.th}>Joined</th>
                <th style={styles.th}>Total Sales</th>
                <th style={styles.th}>Commission Earned</th>
                <th style={styles.th}>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredAffiliates.map((affiliate, index) => (
                <tr key={index} style={styles.tableRow}>
                  <td style={styles.td}>
                    <div style={styles.affiliateCell}>
                      <div style={styles.avatar}>{affiliate.name.charAt(0)}</div>
                      <div>
                        <div style={styles.affiliateName}>{affiliate.name}</div>
                        <div style={styles.affiliateEmail}>{affiliate.email}</div>
                      </div>
                    </div>
                  </td>
                  <td style={styles.td}>
                    <span style={{
                      ...styles.statusBadge,
                      ...(affiliate.status === 'Active' ? styles.statusActive : {}),
                      ...(affiliate.status === 'Pending' ? styles.statusPending : {}),
                      ...(affiliate.status === 'Inactive' ? styles.statusInactive : {}),
                    }}>
                      {affiliate.status}
                    </span>
                  </td>
                  <td style={styles.td}>{affiliate.joined}</td>
                  <td style={styles.td}>${affiliate.totalSales}</td>
                  <td style={styles.td}>${affiliate.commission}</td>
                  <td style={styles.td}>
                    <div style={styles.actions}>
                      {affiliate.status === 'Pending' ? (
                        <>
                          <button style={{...styles.actionButton, ...styles.approveButton}}>
                            ✓ Approve
                          </button>
                          <button style={{...styles.actionButton, ...styles.rejectButton}}>
                            ✕ Reject
                          </button>
                        </>
                      ) : (
                        <button style={styles.actionButton}>View Details</button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

const styles = {
  container: {
    maxWidth: '1400px',
    margin: '0 auto',
  },
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: '2rem',
  },
  heading: {
    fontSize: '2rem',
    fontWeight: '700',
    color: '#0f172a',
    marginBottom: '0.5rem',
  },
  subheading: {
    fontSize: '1rem',
    color: '#64748b',
  },
  statsGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
    gap: '1.5rem',
    marginBottom: '2rem',
  },
  statCard: {
    background: 'white',
    borderRadius: '1rem',
    padding: '1.5rem',
    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
    border: '1px solid #e2e8f0',
  },
  statLabel: {
    fontSize: '0.875rem',
    color: '#64748b',
    marginBottom: '0.5rem',
  },
  statValue: {
    fontSize: '2rem',
    fontWeight: '700',
    color: '#0f172a',
  },
  tableCard: {
    background: 'white',
    borderRadius: '1rem',
    padding: '1.5rem',
    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
    border: '1px solid #e2e8f0',
  },
  tableHeader: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: '1.5rem',
    flexWrap: 'wrap',
    gap: '1rem',
  },
  tableTitle: {
    fontSize: '1.125rem',
    fontWeight: '600',
    color: '#0f172a',
  },
  filters: {
    display: 'flex',
    gap: '0.5rem',
  },
  filterButton: {
    padding: '0.5rem 1rem',
    background: '#f1f5f9',
    border: 'none',
    borderRadius: '0.5rem',
    fontSize: '0.875rem',
    fontWeight: '500',
    color: '#64748b',
    cursor: 'pointer',
    transition: 'all 0.2s',
    fontFamily: 'inherit',
  },
  filterButtonActive: {
    background: '#3b82f6',
    color: 'white',
  },
  tableWrapper: {
    overflowX: 'auto',
  },
  table: {
    width: '100%',
    borderCollapse: 'collapse',
  },
  tableHeaderRow: {
    borderBottom: '2px solid #e2e8f0',
  },
  th: {
    textAlign: 'left',
    padding: '1rem',
    fontSize: '0.875rem',
    fontWeight: '600',
    color: '#64748b',
    textTransform: 'uppercase',
    letterSpacing: '0.05em',
  },
  tableRow: {
    borderBottom: '1px solid #f1f5f9',
  },
  td: {
    padding: '1rem',
    fontSize: '0.95rem',
    color: '#334155',
  },
  affiliateCell: {
    display: 'flex',
    alignItems: 'center',
    gap: '1rem',
  },
  avatar: {
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    color: 'white',
    fontWeight: '600',
    fontSize: '1rem',
  },
  affiliateName: {
    fontWeight: '500',
    color: '#0f172a',
  },
  affiliateEmail: {
    fontSize: '0.875rem',
    color: '#64748b',
  },
  statusBadge: {
    display: 'inline-block',
    padding: '0.375rem 0.75rem',
    borderRadius: '9999px',
    fontSize: '0.875rem',
    fontWeight: '500',
  },
  statusActive: {
    background: '#d1fae5',
    color: '#065f46',
  },
  statusPending: {
    background: '#fef3c7',
    color: '#92400e',
  },
  statusInactive: {
    background: '#f1f5f9',
    color: '#475569',
  },
  actions: {
    display: 'flex',
    gap: '0.5rem',
  },
  actionButton: {
    padding: '0.5rem 1rem',
    background: '#f1f5f9',
    border: 'none',
    borderRadius: '0.5rem',
    fontSize: '0.875rem',
    fontWeight: '500',
    color: '#475569',
    cursor: 'pointer',
    transition: 'all 0.2s',
    fontFamily: 'inherit',
  },
  approveButton: {
    background: '#10b981',
    color: 'white',
  },
  rejectButton: {
    background: '#ef4444',
    color: 'white',
  },
};
]]>
</rosieCreate>

<rosieCreate file="components/Payouts.js">
<![CDATA[
import React, { useState } from 'react';
import { mockData } from '../data/mockData.js';

export function Payouts() {
  const [filter, setFilter] = useState('all');
  const [payouts] = useState(mockData.payouts);

  const filteredPayouts = filter === 'all' 
    ? payouts 
    : payouts.filter(p => p.status.toLowerCase() === filter);

  const totalPending = payouts
    .filter(p => p.status === 'Pending')
    .reduce((sum, p) => sum + parseFloat(p.amount.replace('$', '').replace(',', '')), 0);

  const totalPaid = payouts
    .filter(p => p.status === 'Paid')
    .reduce((sum, p) => sum + parseFloat(p.amount.replace('$', '').replace(',', '')), 0);

  return (
    <div style={styles.container}>
      <div style={styles.header}>
        <div>
          <h2 style={styles.heading}>Payout Management</h2>
          <p style={styles.subheading}>Track and manage affiliate commission payouts</p>
        </div>
        <button style={styles.processButton}>Process Pending Payouts</button>
      </div>

      <div style={styles.statsGrid}>
        <div style={styles.statCard}>
          <div style={styles.statIcon}>⏳</div>
          <div style={styles.statContent}>
            <div style={styles.statLabel}>Pending Payouts</div>
            <div style={styles.statValue}>${totalPending.toFixed(2)}</div>
            <div style={styles.statSubtext}>{payouts.filter(p => p.status === 'Pending').length} payments</div>
          </div>
        </div>
        <div style={styles.statCard}>
          <div style={styles.statIcon}>✅</div>
          <div style={styles.statContent}>
            <div style={styles.statLabel}>Paid This Month</div>
            <div style={styles.statValue}>${totalPaid.toFixed(2)}</div>
            <div style={styles.statSubtext}>{payouts.filter(p => p.status === 'Paid').length} payments</div>
          </div>
        </div>
        <div style={styles.statCard}>
          <div style={styles.statIcon}>📅</div>
          <div style={styles.statContent}>
            <div style={styles.statLabel}>Next Payout Date</div>
            <div style={styles.statValue}>Jan 15, 2024</div>
            <div style={styles.statSubtext}>5 days remaining</div>
          </div>
        </div>
      </div>

      <div style={styles.tableCard}>
        <div style={styles.tableHeader}>
          <h3 style={styles.tableTitle}>All Payouts</h3>
          <div style={styles.filters}>
            {['all', 'pending', 'processing', 'paid', 'failed'].map(f => (
              <button
                key={f}
                style={{
                  ...styles.filterButton,
                  ...(filter === f ? styles.filterButtonActive : {}),
                }}
                onClick={() => setFilter(f)}
              >
                {f.charAt(0).toUpperCase() + f.slice(1)}
              </button>
            ))}
          </div>
        </div>

        <div style={styles.tableWrapper}>
          <table style={styles.table}>
            <thead>
              <tr style={styles.tableHeaderRow}>
                <th style={styles.th}>Affiliate</th>
                <th style={styles.th}>Amount</th>
                <th style={styles.th}>Period</th>
                <th style={styles.th}>Status</th>
                <th style={styles.th}>Payment Method</th>
                <th style={styles.th}>Date</th>
                <th style={styles.th}>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredPayouts.map((payout, index) => (
                <tr key={index} style={styles.tableRow}>
                  <td style={styles.td}>
                    <div style={styles.affiliateCell}>
                      <div style={styles.avatar}>{payout.affiliate.charAt(0)}</div>
                      <div style={styles.affiliateName}>{payout.affiliate}</div>
                    </div>
                  </td>
                  <td style={styles.td}>
                    <span style={styles.amount}>{payout.amount}</span>
                  </td>
                  <td style={styles.td}>{payout.period}</td>
                  <td style={styles.td}>
                    <span style={{
                      ...styles.statusBadge,
                      ...(payout.status === 'Paid' ? styles.statusPaid : {}),
                      ...(payout.status === 'Pending' ? styles.statusPending : {}),
                      ...(payout.status === 'Processing' ? styles.statusProcessing : {}),
                      ...(payout.status === 'Failed' ? styles.statusFailed : {}),
                    }}>
                      {payout.status}
                    </span>
                  </td>
                  <td style={styles.td}>{payout.method}</td>
                  <td style={styles.td}>{payout.date}</td>
                  <td style={styles.td}>
                    <div style={styles.actions}>
                      {payout.status === 'Pending' && (
                        <button style={{...styles.actionButton, ...styles.processButtonSmall}}>
                          Process
                        </button>
                      )}
                      <button style={styles.actionButton}>Details</button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

const styles = {
  container: {
    maxWidth: '1400px',
    margin: '0 auto',
  },
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: '2rem',
    flexWrap: 'wrap',
    gap: '1rem',
  },
  heading: {
    fontSize: '2rem',
    fontWeight: '700',
    color: '#0f172a',
    marginBottom: '0.5rem',
  },
  subheading: {
    fontSize: '1rem',
    color: '#64748b',
  },
  processButton: {
    padding: '0.75rem 1.5rem',
    background: '#3b82f6',
    color: 'white',
    border: 'none',
    borderRadius: '0.5rem',
    fontSize: '0.95rem',
    fontWeight: '500',
    cursor: 'pointer',
    transition: 'all 0.2s',
    fontFamily: 'inherit',
  },
  statsGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
    gap: '1.5rem',
    marginBottom: '2rem',
  },
  statCard: {
    background: 'white',
    borderRadius: '1rem',
    padding: '1.5rem',
    display: 'flex',
    gap: '1rem',
    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
    border: '1px solid #e2e8f0',
  },
  statIcon: {
    fontSize: '2.5rem',
  },
  statContent: {
    flex: 1,
  },
  statLabel: {
    fontSize: '0.875rem',
    color: '#64748b',
    marginBottom: '0.5rem',
  },
  statValue: {
    fontSize: '1.75rem',
    fontWeight: '700',
    color: '#0f172a',
    marginBottom: '0.25rem',
  },
  statSubtext: {
    fontSize: '0.875rem',
    color: '#64748b',
  },
  tableCard: {
    background: 'white',
    borderRadius: '1rem',
    padding: '1.5rem',
    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
    border: '1px solid #e2e8f0',
  },
  tableHeader: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: '1.5rem',
    flexWrap: 'wrap',
    gap: '1rem',
  },
  tableTitle: {
    fontSize: '1.125rem',
    fontWeight: '600',
    color: '#0f172a',
  },
  filters: {
    display: 'flex',
    gap: '0.5rem',
    flexWrap: 'wrap',
  },
  filterButton: {
    padding: '0.5rem 1rem',
    background: '#f1f5f9',
    border: 'none',
    borderRadius: '0.5rem',
    fontSize: '0.875rem',
    fontWeight: '500',
    color: '#64748b',
    cursor: 'pointer',
    transition: 'all 0.2s',
    fontFamily: 'inherit',
  },
  filterButtonActive: {
    background: '#3b82f6',
    color: 'white',
  },
  tableWrapper: {
    overflowX: 'auto',
  },
  table: {
    width: '100%',
    borderCollapse: 'collapse',
  },
  tableHeaderRow: {
    borderBottom: '2px solid #e2e8f0',
  },
  th: {
    textAlign: 'left',
    padding: '1rem',
    fontSize: '0.875rem',
    fontWeight: '600',
    color: '#64748b',
    textTransform: 'uppercase',
    letterSpacing: '0.05em',
  },
  tableRow: {
    borderBottom: '1px solid #f1f5f9',
  },
  td: {
    padding: '1rem',
    fontSize: '0.95rem',
    color: '#334155',
  },
  affiliateCell: {
    display: 'flex',
    alignItems: 'center',
    gap: '1rem',
  },
  avatar: {
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    color: 'white',
    fontWeight: '600',
    fontSize: '1rem',
  },
  affiliateName: {
    fontWeight: '500',
    color: '#0f172a',
  },
  amount: {
    fontWeight: '600',
    color: '#0f172a',
    fontSize: '1.05rem',
  },
  statusBadge: {
    display: 'inline-block',
    padding: '0.375rem 0.75rem',
    borderRadius: '9999px',
    fontSize: '0.875rem',
    fontWeight: '500',
  },
  statusPaid: {
    background: '#d1fae5',
    color: '#065f46',
  },
  statusPending: {
    background: '#fef3c7',
    color: '#92400e',
  },
  statusProcessing: {
    background: '#dbeafe',
    color: '#1e40af',
  },
  statusFailed: {
    background: '#fee2e2',
    color: '#991b1b',
  },
  actions: {
    display: 'flex',
    gap: '0.5rem',
  },
  actionButton: {
    padding: '0.5rem 1rem',
    background: '#f1f5f9',
    border: 'none',
    borderRadius: '0.5rem',
    fontSize: '0.875rem',
    fontWeight: '500',
    color: '#475569',
    cursor: 'pointer',
    transition: 'all 0.2s',
    fontFamily: 'inherit',
  },
  processButtonSmall: {
    background: '#3b82f6',
    color: 'white',
  },
};
]]>
</rosieCreate>

<rosieCreate file="components/Settings.js">
<![CDATA[
import React, { useState } from 'react';

export function Settings() {
  const [settings, setSettings] = useState({
    commissionRate: '15',
    minPayout: '50',
    payoutSchedule: 'monthly',
    autoApprove: false,
    emailNotifications: true,
    webhookUrl: 'https://api.example.com/webhook',
    apiKey: '••••••••••••••••••••••••',
  });

  const handleSave = () => {
    alert('Settings saved successfully!');
  };

  return (
    <div style={styles.container}>
      <div style={styles.header}>
        <h2 style={styles.heading}>Settings</h2>
        <p style={styles.subheading}>Configure your affiliate program settings</p>
      </div>

      <div style={styles.grid}>
        <div style={styles.section}>
          <h3 style={styles.sectionTitle}>Commission Settings</h3>
          <div style={styles.card}>
            <div style={styles.field}>
              <label style={styles.label}>Default Commission Rate (%)</label>
              <input
                type="number"
                value={settings.commissionRate}
                onChange={(e) => setSettings({...settings, commissionRate: e.target.value})}
                style={styles.input}
              />
              <p style={styles.hint}>The default commission percentage for new affiliates</p>
            </div>

            <div style={styles.field}>
              <label style={styles.label}>Minimum Payout Amount ($)</label>
              <input
                type="number"
                value={settings.minPayout}
                onChange={(e) => setSettings({...settings, minPayout: e.target.value})}
                style={styles.input}
              />
              <p style={styles.hint}>Minimum commission amount before payout is processed</p>
            </div>

            <div style={styles.field}>
              <label style={styles.label}>Payout Schedule</label>
              <select
                value={settings.payoutSchedule}
                onChange={(e) => setSettings({...settings, payoutSchedule: e.target.value})}
                style={styles.select}
              >
                <option value="weekly">Weekly</option>
                <option value="biweekly">Bi-weekly</option>
                <option value="monthly">Monthly</option>
              </select>
              <p style={styles.hint}>How often to process affiliate payouts</p>
            </div>
          </div>
        </div>

        <div style={styles.section}>
          <h3 style={styles.sectionTitle}>Affiliate Management</h3>
          <div style={styles.card}>
            <div style={styles.field}>
              <div style={styles.toggleField}>
                <div>
                  <label style={styles.label}>Auto-approve New Affiliates</label>
                  <p style={styles.hint}>Automatically approve affiliate signup requests</p>
                </div>
                <label style={styles.toggle}>
                  <input
                    type="checkbox"
                    checked={settings.autoApprove}
                    onChange={(e) => setSettings({...settings, autoApprove: e.target.checked})}
                  />
                  <span style={styles.toggleSlider}></span>
                </label>
              </div>
            </div>

            <div style={styles.field}>
              <div style={styles.toggleField}>
                <div>
                  <label style={styles.label}>Email Notifications</label>
                  <p style={styles.hint}>Send email notifications for new signups and sales</p>
                </div>
                <label style={styles.toggle}>
                  <input
                    type="checkbox"
                    checked={settings.emailNotifications}
                    onChange={(e) => setSettings({...settings, emailNotifications: e.target.checked})}
                  />
                  <span style={styles.toggleSlider}></span>
                </label>
              </div>
            </div>
          </div>
        </div>

        <div style={styles.section}>
          <h3 style={styles.sectionTitle}>Whop API Integration</h3>
          <div style={styles.card}>
            <div style={styles.field}>
              <label style={styles.label}>Webhook URL</label>
              <input
                type="text"
                value={settings.webhookUrl}
                onChange={(e) => setSettings({...settings, webhookUrl: e.target.value})}
                style={styles.input}
              />
              <p style={styles.hint}>URL to receive webhook notifications from Whop</p>
            </div>

            <div style={styles.field}>
              <label style={styles.label}>API Key</label>
              <div style={styles.apiKeyField}>
                <input
                  type="password"
                  value={settings.apiKey}
                  readOnly
                  style={styles.input}
                />
                <button style={styles.regenerateButton}>Regenerate</button>
              </div>
              <p style={styles.hint}>Your unique API key for Whop integration</p>
            </div>

            <div style={styles.infoBox}>
              <div style={styles.infoIcon}>ℹ️</div>
              <div>
                <strong>Integration Status:</strong> Ready to connect<br />
                <span style={styles.infoText}>
                  To complete setup, add this app to your Whop dashboard and configure the webhook URL.
                </span>
              </div>
            </div>
          </div>
        </div>

        <div style={styles.section}>
          <h3 style={styles.sectionTitle}>Branding</h3>
          <div style={styles.card}>
            <div style={styles.field}>
              <label style={styles.label}>Affiliate Portal Name</label>
              <input
                type="text"
                placeholder="My Affiliate Program"
                style={styles.input}
              />
              <p style={styles.hint}>The name shown to affiliates in their dashboard</p>
            </div>

            <div style={styles.field}>
              <label style={styles.label}>Custom Domain</label>
              <input
                type="text"
                placeholder="affiliates.yourdomain.com"
                style={styles.input}
              />
              <p style={styles.hint}>Optional: Use a custom domain for your affiliate portal</p>
            </div>
          </div>
        </div>
      </div>

      <div style={styles.footer}>
        <button style={styles.saveButton} onClick={handleSave}>
          Save Changes
        </button>
        <button style={styles.cancelButton}>Cancel</button>
      </div>
    </div>
  );
}

const styles = {
  container: {
    maxWidth: '1000px',
    margin: '0 auto',
  },
  header: {
    marginBottom: '2rem',
  },
  heading: {
    fontSize: '2rem',
    fontWeight: '700',
    color: '#0f172a',
    marginBottom: '0.5rem',
  },
  subheading: {
    fontSize: '1rem',
    color: '#64748b',
  },
  grid: {
    display: 'flex',
    flexDirection: 'column',
    gap: '2rem',
    marginBottom: '2rem',
  },
  section: {
    display: 'flex',
    flexDirection: 'column',
    gap: '1rem',
  },
  sectionTitle: {
    fontSize: '1.25rem',
    fontWeight: '600',
    color: '#0f172a',
  },
  card: {
    background: 'white',
    borderRadius: '1rem',
    padding: '1.5rem',
    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
    border: '1px solid #e2e8f0',
    display: 'flex',
    flexDirection: 'column',
    gap: '1.5rem',
  },
  field: {
    display: 'flex',
    flexDirection: 'column',
    gap: '0.5rem',
  },
  label: {
    fontSize: '0.95rem',
    fontWeight: '500',
    color: '#334155',
  },
  input: {
    padding: '0.75rem',
    border: '1px solid #e2e8f0',
    borderRadius: '0.5rem',
    fontSize: '0.95rem',
    fontFamily: 'inherit',
    transition: 'border-color 0.2s',
  },
  select: {
    padding: '0.75rem',
    border: '1px solid #e2e8f0',
    borderRadius: '0.5rem',
    fontSize: '0.95rem',
    fontFamily: 'inherit',
    background: 'white',
    cursor: 'pointer',
  },
  hint: {
    fontSize: '0.875rem',
    color: '#64748b',
    margin: 0,
  },
  toggleField: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    gap: '1rem',
  },
  toggle: {
    position: 'relative',
    display: 'inline-block',
    width: '50px',
    height: '26px',
    flexShrink: 0,
  },
  toggleSlider: {
    position: 'absolute',
    cursor: 'pointer',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    background: '#cbd5e1',
    transition: '0.3s',
    borderRadius: '26px',
  },
  apiKeyField: {
    display: 'flex',
    gap: '0.5rem',
  },
  regenerateButton: {
    padding: '0.75rem 1rem',
    background: '#f1f5f9',
    border: 'none',
    borderRadius: '0.5rem',
    fontSize: '0.95rem',
    fontWeight: '500',
    color: '#475569',
    cursor: 'pointer',
    fontFamily: 'inherit',
    whiteSpace: 'nowrap',
  },
  infoBox: {
    display: 'flex',
    gap: '1rem',
    padding: '1rem',
    background: '#eff6ff',
    border: '1px solid #bfdbfe',
    borderRadius: '0.5rem',
    fontSize: '0.95rem',
    color: '#1e40af',
  },
  infoIcon: {
    fontSize: '1.5rem',
    flexShrink: 0,
  },
  infoText: {
    fontSize: '0.875rem',
    color: '#1e40af',
    opacity: 0.9,
  },
  footer: {
    display: 'flex',
    gap: '1rem',
    justifyContent: 'flex-end',
  },
  saveButton: {
    padding: '0.75rem 2rem',
    background: '#3b82f6',
    color: 'white',
    border: 'none',
    borderRadius: '0.5rem',
    fontSize: '0.95rem',
    fontWeight: '500',
    cursor: 'pointer',
    fontFamily: 'inherit',
  },
  cancelButton: {
    padding: '0.75rem 2rem',
    background: '#f1f5f9',
    color: '#475569',
    border: 'none',
    borderRadius: '0.5rem',
    fontSize: '0.95rem',
    fontWeight: '500',
    cursor: 'pointer',
    fontFamily: 'inherit',
  },
};

// CSS for toggle switch
const styleSheet = document.createElement('style');
styleSheet.textContent = `
  input[type="checkbox"] {
    opacity: 0;
    width: 0;
    height: 0;
  }
  input[type="checkbox"]:checked + span {
    background: #3b82f6;
  }
  input[type="checkbox"]:checked + span:before {
    transform: translateX(24px);
  }
  input[type="checkbox"] + span:before {
    content: "";
    position: absolute;
    height: 18px;
    width: 18px;
    left: 4px;
    bottom: 4px;
    background: white;
    transition: 0.3s;
    border-radius: 50%;
  }
`;
document.head.appendChild(styleSheet);
]]>
</rosieCreate>

<rosieCreate file="data/mockData.js">
<![CDATA[
export const mockData = {
  revenueData: [
    { day: 'Mon', revenue: 1200, commission: 180 },
    { day: 'Tue', revenue: 1800, commission: 270 },
    { day: 'Wed', revenue: 1500, commission: 225 },
    { day: 'Thu', revenue: 2100, commission: 315 },
    { day: 'Fri', revenue: 2400, commission: 360 },
    { day: 'Sat', revenue: 3200, commission: 480 },
    { day: 'Sun', revenue: 2800, commission: 420 },
  ],

  clicksData: [
    { day: 'Mon', clicks: 1200 },
    { day: 'Tue', clicks: 1500 },
    { day: 'Wed', clicks: 1100 },
    { day: 'Thu', clicks: 1800 },
    { day: 'Fri', clicks: 2100 },
    { day: 'Sat', clicks: 2800 },
    { day: 'Sun', clicks: 2400 },
  ],

  topAffiliates: [
    { name: 'Sarah Johnson', email: 'sarah@example.com', clicks: '3,240', sales: '127', commission: '1,905', conversion: '3.9' },
    { name: 'Mike Chen', email: 'mike@example.com', clicks: '2,890', sales: '98', commission: '1,470', conversion: '3.4' },
    { name: 'Emma Williams', email: 'emma@example.com', clicks: '2,650', sales: '89', commission: '1,335', conversion: '3.4' },
    { name: 'David Brown', email: 'david@example.com', clicks: '2,120', sales: '76', commission: '1,140', conversion: '3.6' },
    { name: 'Lisa Martinez', email: 'lisa@example.com', clicks: '1,980', sales: '65', commission: '975', conversion: '3.3' },
  ],

  allAffiliates: [
    { name: 'Sarah Johnson', email: 'sarah@example.com', status: 'Active', joined: 'Jan 15, 2024', totalSales: '12,450', commission: '1,867' },
    { name: 'Mike Chen', email: 'mike@example.com', status: 'Active', joined: 'Jan 12, 2024', totalSales: '9,800', commission: '1,470' },
    { name: 'Emma Williams', email: 'emma@example.com', status: 'Active', joined: 'Jan 10, 2024', totalSales: '8,900', commission: '1,335' },
    { name: 'David Brown', email: 'david@example.com', status: 'Pending', joined: 'Jan 8, 2024', totalSales: '0', commission: '0' },
    { name: 'Lisa Martinez', email: 'lisa@example.com', status: 'Active', joined: 'Jan 5, 2024', totalSales: '6,500', commission: '975' },
    { name: 'James Wilson', email: 'james@example.com', status: 'Pending', joined: 'Jan 3, 2024', totalSales: '0', commission: '0' },
    { name: 'Emily Davis', email: 'emily@example.com', status: 'Inactive', joined: 'Dec 28, 2023', totalSales: '4,200', commission: '630' },
    { name: 'Robert Taylor', email: 'robert@example.com', status: 'Active', joined: 'Dec 22, 2023', totalSales: '5,600', commission: '840' },
  ],

  payouts: [
    { affiliate: 'Sarah Johnson', amount: '$1,867', period: 'Jan 2024', status: 'Pending', method: 'PayPal', date: 'Jan 15, 2024' },
    { affiliate: 'Mike Chen', amount: '$1,470', period: 'Jan 2024', status: 'Pending', method: 'Bank Transfer', date: 'Jan 15, 2024' },
    { affiliate: 'Emma Williams', amount: '$1,335', period: 'Jan 2024', status: 'Processing', method: 'PayPal', date: 'Jan 14, 2024' },
    { affiliate: 'Lisa Martinez', amount: '$975', period: 'Dec 2023', status: 'Paid', method: 'PayPal', date: 'Dec 15, 2023' },
    { affiliate: 'Robert Taylor', amount: '$840', period: 'Dec 2023', status: 'Paid', method: 'Bank Transfer', date: 'Dec 15, 2023' },
    { affiliate: 'Emily Davis', amount: '$630', period: 'Dec 2023', status: 'Failed', method: 'PayPal', date: 'Dec 15, 2023' },
    { affiliate: 'Sarah Johnson', amount: '$1,250', period: 'Nov 2023', status: 'Paid', method: 'PayPal', date: 'Nov 15, 2023' },
    { affiliate: 'Mike Chen', amount: '$980', period: 'Nov 2023', status: 'Paid', method: 'Bank Transfer', date: 'Nov 15, 2023' },
  ],
};
]]>
</rosieCreate>
</rosieArtifact>
